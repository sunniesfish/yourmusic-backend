name: Backend Build and Deploy

# Workflow runs when code is pushed to main branch
on:
  push:
    branches: [main]

# Environment variables
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  REPOSITORY: ${{ secrets.GCP_REPOSITORY }}
  IMAGE_NAME: ${{ secrets.GCP_IMAGE_NAME }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}
  SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  SA_KEY: ${{ secrets.GCP_SA_KEY }}
  SECRET_NAME: ${{ secrets.GCP_ENV_SECRET_NAME }}
  VPC_CONNECTOR: ${{ secrets.GCP_VPC_CONNECTOR }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the source code
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Set up Google Cloud authentication
      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.SA_KEY }}

      # 3. Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # 4. Configure Docker authentication
      - name: Configure Docker authentication
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # 5. Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                       -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest \
                       .

      # 6. Push Docker image to Artifact Registry
      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      # 7. Get latest secret version
      - name: Get latest secret version
        id: get_secret_version
        run: |
          LATEST_SECRET_VERSION=$(gcloud secrets versions list ${{ env.SECRET_NAME }} \
            --sort-by=~createTime --limit=1 --format="value(name)")
          echo "Latest secret version: $LATEST_SECRET_VERSION"
          echo "LATEST_SECRET_VERSION=${LATEST_SECRET_VERSION}" >> $GITHUB_OUTPUT

      # 8. Run migrations
      - name: Execute Cloud Run Job for Migrations
        run: |
          gcloud run jobs delete migration-job --region ${{ env.REGION }} --quiet || true

          gcloud run jobs create migration-job \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --vpc-connector ${{ env.VPC_CONNECTOR }} \
            --set-secrets="/secrets/.env=${{ env.SECRET_NAME }}:${{ steps.get_secret_version.outputs.LATEST_SECRET_VERSION }}" \
            --command="npm" \
            --args="run,migration:run,--,--dataSource,./dist/config/ormconfig.js"

          gcloud run jobs execute migration-job --region ${{ env.REGION }} --wait

      # 8.1 Check Migration Job logs
      - name: Check Migration Job logs
        if: always()
        run: |
          echo "### Migration Job execution result ###"

          # get the latest execution id
          EXECUTION_ID=$(gcloud run jobs executions list \
            --job migration-job \
            --region ${{ env.REGION }} \
            --sort-by=~create_time \
            --limit=1 \
            --format="value(name)")
            
          echo "Latest execution ID: $EXECUTION_ID"

          # check the execution status
          gcloud run jobs executions describe $EXECUTION_ID \
            --job migration-job \
            --region ${{ env.REGION }} \
            --format="table(name, status, startTime, completionTime)"

          # print the job logs
          echo "### Migration Job logs ###"
          gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=migration-job AND resource.labels.execution_name=${EXECUTION_ID##*/}" \
            --limit=50 \
            --format="table(timestamp.date('%Y-%m-%d %H:%M:%S'), severity, textPayload)" \
            --order=asc

      # 9. Deploy to Cloud Run with VPC connectivity using the latest secret version
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account ${{ env.SERVICE_ACCOUNT }} \
            --set-secrets="/secrets/.env=${{ env.SECRET_NAME }}:${{ steps.get_secret_version.outputs.LATEST_SECRET_VERSION }}" \
            --vpc-connector ${{ env.VPC_CONNECTOR }} \
            --vpc-egress=private-ranges-only \
            --verbosity=debug

      # 9. Check Cloud Run service logs
      - name: Check Cloud Run service logs
        if: always()
        run: |
          echo "### Recent logs ###"
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.SERVICE_NAME }}" \
            --limit=50 \
            --format="table(timestamp, severity, textPayload)" \
            --freshness=1h

      # 10. Verify deployment status
      - name: Verify deployment status
        if: always()
        run: |
          echo "### Deployment status ###"
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format="yaml(status)" || true
